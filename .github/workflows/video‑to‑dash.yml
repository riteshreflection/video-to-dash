name: Convert uploaded video to DASH

on:
  repository_dispatch:
    types: [video_uploaded]

  workflow_dispatch:
    inputs:
      publicUrl:
        description: "Direct URL to the source MP4 (https://.../file.mp4)"
        required: true
      key:
        description: "Destination key in R2 (optional, e.g. uploads/my.mp4)"
        required: false

env:
  R2_BUCKET: classes
  ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
  R2_ENDPOINT: https://${{ secrets.ACCOUNT_ID }}.r2.cloudflarestorage.com

jobs:
  transcode:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout (empty repo)
      uses: actions/checkout@v4
      with:
        sparse-checkout: ""

    - name: Derive SOURCE_URL and KEY
      run: |
        set -euo pipefail
        SOURCE_URL="${{ github.event.client_payload.publicUrl || github.event.inputs.publicUrl }}"
        KEY="${{ github.event.client_payload.key || github.event.inputs.key }}"
        if [ -z "$KEY" ]; then
          KEY="uploads/$(basename "$SOURCE_URL")"
        fi
        echo "SOURCE_URL=$SOURCE_URL" >> $GITHUB_ENV
        echo "KEY=$KEY"               >> $GITHUB_ENV

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        ffmpeg -version | head -n1

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        python3 -m pip install --upgrade --user awscli
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        aws --version

    - name: Download original MP4
      run: |
        mkdir -p work
        curl -L "$SOURCE_URL" --fail -o work/input.mp4
        du -h work/input.mp4

    - name: Convert to DASH
      run: |
        mkdir -p work/dash
        BASE=$(basename "$KEY" .mp4)
        ffmpeg -y -i work/input.mp4 \
          -vf scale=w=1280:h=-2:flags=bicubic \
          -map 0 -map -0:s \
          -c:v libx264 -preset veryfast -crf 23 \
          -c:a aac -b:a 128k \
          -sc_threshold 0 -g 48 -keyint_min 48 \
          -f dash \
          -seg_duration 4 \
          -use_template 1 -use_timeline 1 \
          -adaptation_sets "id=0,streams=v id=1,streams=a" \
          work/dash/${BASE}.mpd

    - name: Upload DASH to R2
      env:
        AWS_ACCESS_KEY_ID:     ${{ secrets.R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        AWS_EC2_METADATA_DISABLED: true
      run: |
        aws s3 cp work/dash "s3://${{ env.R2_BUCKET }}/dash/" --recursive \
          --endpoint-url "${{ env.R2_ENDPOINT }}"

    - name: Report summary
      run: |
        BASE=$(basename "$KEY" .mp4)
        echo "ðŸŽ‰ DASH manifest ready at:"
        echo "https://classes.thecampus.in/dash/${BASE}.mpd"
